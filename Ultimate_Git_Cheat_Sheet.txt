Create a Repository
    Create a new local repository:
    $ git init [project name]
​
    Clone a repository:
    $ git clone git_url
    ​
    Clone a repository into a specified directory:
    $ git clone git_url my_directory

Make a change
    Show modified files in working directory, staged for your next commit:
    $ git status
    ​
    Stages the file, ready for commit:
    $ git add [file]
    ​
    Stage all changed files, ready for commit:
    $ git add .
    ​
    Commit all staged files to versioned history:
    $ git commit -m "commit message"
    ​
    Commit all your tracked files to versioned history:
    $ git commit -am "commit message"

    Discard changes in the working directory that are not staged.
    $ git restore [file]
    ​
    Un-stage the file but keep the changes.
    $ git reset [file]
    ​
    Revert everything to the last commit:
    $ git reset --hard
    ​
    Diff of what is changed but not staged:
    $ git diff
    ​
    Apply any commits of current branch ahead of specified one:
    $ git rebase [branch]

Working with Branches
    List all local branches:
    $ git branch
    ​
    List all branches, local and remote:
    $ git branch -av
    ​
    Switch to my_branch, and update working directory:
    $ git checkout my_branch
    ​
    Create a new branch called new_branch:
    $ git checkout -b new_branch
    ​
    Delete the branch called my_branch:
    $ git branch -d my_branch

    Merge branch A into branch B
    $ git checkout branchB
    $ git merge branchA

Temporary Commits
    Save modified and staged changes:
    $ git stash
    ​
    List stack-order of stashed file changes:
    $ git stash list
    ​
    Apply the top stash to the working directory.
    $ git stash pop

Show us
    Search change by content:
    $ git log -S'<a term in the source>'
    ​
    Show changes over time for specific file:
    $ git log -p <file_name>
    ​
    Print out a cool visualization of your log:
    $ git log --pretty=oneline --graph --decorate --all

Rewriting history
    Let's say you just committed and you made a mistake in your commit log message. 
    Running this command when there is nothing staged lets you edit the previous commit’s message without altering its snapshot.
    Premature commits happen all the time in the course of your everyday development. 
    It’s easy to forget to stage a file or to format your commit message the wrong way. 
    The --amend flag is a convenient way to fix these minor mistakes.
    Rewrite last commit message:
    $ git commit --amend -m "new message"

Rename branch
    Renamed to new_name:
    $ git branch -m <new_name>
    ​
    Push and reset:
    $ git push origin -u <new_name>
    ​
    Delete remote branch:
    $ git push origin --delete <old>